
Application.properties is configration file where we store data as key value pairs

DAL Layer(Data Access Layer) Code should be able to communicate with database
JDBC - java database connectivity APIs
mySQLDiver, H2Diver - These Drivers implement JDBC APIs

JDBC Apis -> Rules , JDBC drivers -> actual implementation

Hibernate (Object relation mapping) acts as a layer between Java and DB to facilate communication
App -> ORM --- JDBC Apis -> DB
ORM abstracts JDBC
Problem ye thi ki market me ab sab apna apna version bnane lge ORM ka so then comes JDMC Apis into rescue
JPA -> Java persistent APIs
H2 - lightweight in memory database

 --> @Entity annotation -> tell JPA to create table for this class
 --> @Id -> define primary key
 --> @Table(name = "your name") give table name
   Client providing unique id everytime is troublesome so database tum hi sambhaloo

 --> @GeneratedValue(strategy = GenerationType.AUTO)
   GenerationType ->
                1.identity -> incremental value
                2.sequence
                3.table
                4.auto

 --> @Column(name = "CustomName", length = 500, nullable = false)

 --> SpringData Provides functionality of creating CRUD with DB,
 make a interface and make it extend JPA Repository
-> it will create concrete implementation of interface

== How to support Complex Queries in Spring Data ===
- provide abstract method in the interface

Relationships ***************************8

@ManyToMany
@OneToMany

Above are the types of lazy loading . lazy loading simply means that if a class has Many relation with
other entity then this can cause performance issues as whenever we will make a object or query the class
all the related class have to loaded which can take time and degrade performance
By default they are Lazy Loading from Spring's end but we can change it using fetch type

@Column is not applicable when we are using Relations


@OneToOne
@ManyToOne
Since this is many to one we can load entity pretty fast so there is no need of lazy loading
this is known as eager fetching

One more problem can occur while making relations between tables and that is creation of one extra table
which is wasting memory and is of no use so we can avoid that using mapped_by to tell spring

However this is not possible for ManytoMany as we must have a separate table that has all the relation
between two tables

@JoinTable annotation is used to change joined table name
And we can also configure column names using joinColumns and inverseJoinColumns

For the given entity i want to store collections

Creating a separate entity would be a overkill
    *******      User -> mobile Number    *******

Referential Integrity
Suppose there are two tables A and B and A has foreign key pointed to B
Now referential integrity states that You cannot delete from table B as some foreign key is pointing to it

JPA Cascading ->
if i am deleting something i should first delete data from its depending table

Kinds of Cascading ->
    1.PERSIST -> if you are persisting parent then child will also be stored

    city -> t1, t2, t3

    it will not only store city object in  table but will also have theratre objects saved in theatre table

    2.REMOVE -> if you are removing parent it will also remove all the childs
    3.REFRESH -> if you are loading parent entity child entity will also be loaded
    4.MERGE ->
    5.DETACH ->
    6.ALL -> if anything happening to parent same should happen with child

Controller -> Service Layer -> Data Access Layer (Dao)

for good practice Service layer has interfaces and then class implements them for methods using DAO Layer

Testing Vs Debugging

Testing is finding if code has problem or not
Debugging is finding root cause of the problem

J unit -> framework to write test cases and testing

@Test -> whenever we use this method becomes executable and test method
@BeforeEach -> this will be executed before any kind of test is run
@AfterEach -> this will be executed after every test is executed
@BeforeAll -> Only executed only one time in very beginning
@AfterAll -> In the very end only once

naming convention -> className + test

Assertions -> class provided to actually Pass / Fail tests
Assertions.assertEquals(actualResult, expectedResult);

@SpringBootTest -> Testing ke time spring ki functionality

MovieServiceImpl depends on MovieServiceDao
if i test movie service impl i will not be able to figure out whether problem is in impl or dao

for unit testing i should absolutely make sure that all the depending things are working correctly
if that is the case only then i can unit test serviceImpl

Strategy for Unit testing
 * Replace the dependencies with dummy dependencies and test them for returning the correct result
  -> How to do that ??
  -> Ensure it returns correct result

  MockItO helps us in doing that

  @Mock - original ni chiye, duplicate chiye

  @InjectMocks -> creates movieServiceImpl object with mocked moviedao

  *says moviedao when save method is called just return object back
  * doesnt involve actual calling of DB
  Mockito.when(movieDao.save(Movie)).thenReturn(movie)


For Building REST u need support of some external library

ResponseEntity is basically responsible for Converting to JSON and return it

Jackson is used to Handling JSON/Java object conversion
Using same java object for storing and updating values might not be an good idea
and not considered a good practice

Talking to client Dtos (Data Transfer Objects)

Model Mapper class is used to make similar entity

Model Mapper Bean not available -> make use of @Bean annotation to a function

@RequestBody -> Spring ko hint do ki jo bhi body me json aya h usko convert krdo dto me

@JsonProperty -> used to give custom name to json fields for user